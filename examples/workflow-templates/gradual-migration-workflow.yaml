# Gradual Migration Workflow
# This workflow enables incremental migration of large codebases over multiple iterations

name: "Gradual Migration Workflow"
description: "Incremental approach for migrating large unittest codebases"
version: "1.0.0"

# Migration Strategy
strategy:
  type: "incremental"
  batch_size: 10  # Files per migration batch
  max_iterations: 20
  stop_on_failure: false

# Phase Definitions
phases:
  - name: "phase_1_preparation"
    description: "Set up gradual migration infrastructure"
    duration: "1-2 days"
    success_criteria:
      - "Migration tooling configured"
      - "File prioritization complete"
      - "Baseline metrics established"

  - name: "phase_2_pilot"
    description: "Migrate small subset to validate approach"
    duration: "1-3 days"
    file_selection:
      criteria: "simplest_files"
      max_files: 5
    success_criteria:
      - "Pilot migration successful"
      - "Process documented"
      - "Lessons learned captured"

  - name: "phase_3_incremental"
    description: "Migrate remaining files in controlled batches"
    duration: "1-4 weeks"
    batch_strategy:
      prioritize_by: "complexity"
      batch_size: 10
      review_required: true
    success_criteria:
      - "All files migrated"
      - "Tests passing"
      - "Performance maintained"

  - name: "phase_4_optimization"
    description: "Optimize and refactor migrated code"
    duration: "3-5 days"
    activities:
      - "Remove unittest dependencies"
      - "Optimize pytest patterns"
      - "Update documentation"
    success_criteria:
      - "Code quality improved"
      - "Technical debt reduced"
      - "Documentation updated"

# Workflow Steps (Per Batch)
batch_workflow:
  - name: "select_files"
    description: "Select next batch of files for migration"
    type: "selection"
    config:
      selection_criteria: "${PHASE_CRITERIA}"
      max_batch_size: 10
      exclude_patterns: ["*/__pycache__/*", "*.pyc"]

  - name: "analyze_batch"
    description: "Analyze selected files for migration complexity"
    type: "analysis"
    config:
      detailed_analysis: true
      estimate_effort: true
      identify_dependencies: true

  - name: "create_migration_branch"
    description: "Create feature branch for batch migration"
    type: "git"
    config:
      branch_pattern: "migration/batch-${BATCH_NUMBER}"
      base_branch: "main"

  - name: "migrate_batch"
    description: "Execute migration for selected files"
    type: "migration"
    config:
      config_template: "examples/config-templates/batch-processing.yaml"
      parallel_processing: true
      max_workers: 4

  - name: "validate_batch"
    description: "Validate migrated files"
    type: "validation"
    config:
      run_tests: true
      check_coverage: true
      performance_baseline: true

  - name: "code_review"
    description: "Submit batch for code review"
    type: "review"
    config:
      create_pull_request: true
      assign_reviewers: true
      require_approval: true

  - name: "merge_batch"
    description: "Merge approved batch into main branch"
    type: "merge"
    config:
      merge_strategy: "squash"
      delete_branch: true

# Monitoring and Progress Tracking
monitoring:
  metrics:
    - "files_migrated"
    - "tests_passing"
    - "code_coverage"
    - "migration_velocity"
    - "error_rate"

  dashboards:
    - "migration_progress.html"
    - "quality_metrics.json"
    - "velocity_chart.png"

  alerts:
    - "migration_stalled"
    - "quality_degradation"
    - "test_failures_increased"

# Risk Mitigation
risk_mitigation:
  - risk: "Migration introduces bugs"
    mitigation: "Comprehensive testing, gradual rollout"
  - risk: "Team disruption"
    mitigation: "Parallel development, clear communication"
  - risk: "Performance regression"
    mitigation: "Performance monitoring, optimization phase"
  - risk: "Knowledge loss"
    mitigation: "Documentation, training sessions"

# Communication Plan
communication:
  daily_updates: true
  weekly_reports: true
  stakeholder_reviews: true
  team_training: true

# Success Metrics
success_metrics:
  - "All unittest files migrated to pytest"
  - "Test suite reliability maintained"
  - "Code quality improved or maintained"
  - "Team productivity not negatively impacted"
  - "Migration completed within timeline"
  - "Knowledge transfer successful"

# Timeline and Milestones
timeline:
  phase_1: "Week 1"
  phase_2: "Week 2"
  phase_3: "Weeks 3-6"
  phase_4: "Week 7"
  total_duration: "6-8 weeks"

# Resource Requirements
resources:
  personnel:
    - "Migration lead developer"
    - "Code reviewers (2-3)"
    - "QA engineer"
  tools:
    - "Migration automation tools"
    - "CI/CD pipeline"
    - "Code quality tools"
    - "Monitoring dashboard"