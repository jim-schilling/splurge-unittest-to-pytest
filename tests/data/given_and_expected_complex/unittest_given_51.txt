"""Complex unittest example with subTest for database operations."""
import unittest
from dataclasses import dataclass
from typing import Any


@dataclass
class User:
    """User entity."""
    id: int
    name: str
    email: str
    active: bool


class UserRepository:
    """Mock user repository."""
    
    def __init__(self) -> None:
        self._users: dict[int, User] = {}
        self._next_id: int = 1
    
    def create(self, name: str, email: str) -> User:
        """Create a new user."""
        user = User(id=self._next_id, name=name, email=email, active=True)
        self._users[user.id] = user
        self._next_id += 1
        return user
    
    def get(self, user_id: int) -> User | None:
        """Get user by ID."""
        return self._users.get(user_id)
    
    def update(self, user_id: int, **kwargs: Any) -> User | None:
        """Update user fields."""
        user = self._users.get(user_id)
        if user:
            for key, value in kwargs.items():
                setattr(user, key, value)
        return user
    
    def delete(self, user_id: int) -> bool:
        """Delete user by ID."""
        return self._users.pop(user_id, None) is not None


class TestUserRepositoryCRUD(unittest.TestCase):
    """Test user repository CRUD operations with subTest."""
    
    def setUp(self) -> None:
        """Set up test repository."""
        self.repo = UserRepository()
    
    def test_create_multiple_users_with_validation(self) -> None:
        """Test creating multiple users with different validation scenarios."""
        test_cases = [
            {
                "name": "Alice Smith",
                "email": "alice@example.com",
                "expected_active": True,
                "description": "Standard user creation"
            },
            {
                "name": "Bob Jones",
                "email": "bob@test.org",
                "expected_active": True,
                "description": "Different domain email"
            },
            {
                "name": "Charlie Brown",
                "email": "charlie@company.co.uk",
                "expected_active": True,
                "description": "International domain"
            },
            {
                "name": "Diana Prince",
                "email": "diana.prince@enterprise.com",
                "expected_active": True,
                "description": "Email with dot in local part"
            },
        ]
        
        for i, case in enumerate(test_cases):
            with self.subTest(case=case["description"], index=i):
                user = self.repo.create(case["name"], case["email"])
                
                self.assertIsNotNone(user)
                self.assertEqual(user.name, case["name"])
                self.assertEqual(user.email, case["email"])
                self.assertEqual(user.active, case["expected_active"])
                self.assertGreater(user.id, 0)
    
    def test_update_operations_with_different_fields(self) -> None:
        """Test updating different user fields in various combinations."""
        user = self.repo.create("Test User", "test@example.com")
        
        update_scenarios = [
            {
                "updates": {"name": "Updated Name"},
                "verify": {"name": "Updated Name"},
                "description": "Update name only"
            },
            {
                "updates": {"email": "newemail@example.com"},
                "verify": {"email": "newemail@example.com"},
                "description": "Update email only"
            },
            {
                "updates": {"active": False},
                "verify": {"active": False},
                "description": "Deactivate user"
            },
            {
                "updates": {"name": "Final Name", "email": "final@example.com"},
                "verify": {"name": "Final Name", "email": "final@example.com"},
                "description": "Update multiple fields"
            },
        ]
        
        for scenario in update_scenarios:
            with self.subTest(scenario=scenario["description"]):
                updated_user = self.repo.update(user.id, **scenario["updates"])
                
                self.assertIsNotNone(updated_user)
                for field, expected_value in scenario["verify"].items():
                    actual_value = getattr(updated_user, field)
                    self.assertEqual(
                        actual_value,
                        expected_value,
                        f"Field {field} mismatch"
                    )
    
    def test_complex_workflow_with_multiple_operations(self) -> None:
        """Test complex workflows combining create, read, update, delete."""
        workflows = [
            {
                "name": "Create and immediate delete",
                "steps": [
                    ("create", {"name": "Temp User", "email": "temp@example.com"}),
                    ("delete", {}),
                ],
                "final_exists": False,
            },
            {
                "name": "Create, update twice, then read",
                "steps": [
                    ("create", {"name": "Multi Update", "email": "multi@example.com"}),
                    ("update", {"name": "First Update"}),
                    ("update", {"email": "updated@example.com"}),
                    ("read", {}),
                ],
                "final_exists": True,
                "final_name": "First Update",
                "final_email": "updated@example.com",
            },
            {
                "name": "Create, deactivate, reactivate",
                "steps": [
                    ("create", {"name": "Toggle User", "email": "toggle@example.com"}),
                    ("update", {"active": False}),
                    ("update", {"active": True}),
                ],
                "final_exists": True,
                "final_active": True,
            },
        ]
        
        for workflow in workflows:
            with self.subTest(workflow=workflow["name"]):
                user_id = None
                current_user = None
                
                for step, params in workflow["steps"]:
                    if step == "create":
                        current_user = self.repo.create(**params)
                        user_id = current_user.id
                    elif step == "update":
                        current_user = self.repo.update(user_id, **params)
                    elif step == "read":
                        current_user = self.repo.get(user_id)
                    elif step == "delete":
                        self.repo.delete(user_id)
                        current_user = None
                
                if workflow["final_exists"]:
                    self.assertIsNotNone(current_user)
                    if "final_name" in workflow:
                        self.assertEqual(current_user.name, workflow["final_name"])
                    if "final_email" in workflow:
                        self.assertEqual(current_user.email, workflow["final_email"])
                    if "final_active" in workflow:
                        self.assertEqual(current_user.active, workflow["final_active"])
                else:
                    final_user = self.repo.get(user_id) if user_id else None
                    self.assertIsNone(final_user)


if __name__ == "__main__":
    unittest.main()
