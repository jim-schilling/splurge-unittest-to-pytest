import unittest


def setUpModule():
    global shared_cache
    shared_cache = {}


def tearDownModule():
    global shared_cache
    shared_cache.clear()
    shared_cache = None


class TestCacheConstantSize(unittest.TestCase):
    def setUp(self):
        self.cache_manager = CacheManager(shared_cache)
        self.test_key = "test_key"
        self.test_value = "test_value"

    def tearDown(self):
        self.cache_manager.clear()
        self.cache_manager = None
        self.test_key = None
        self.test_value = None

    def test_size_sensitive_cases(self):
        size = 3
        scenarios = [
            {"name": "empty", "data": [""] * size},
            {"name": "none", "data": [None] * size},
        ]

        for case in scenarios:
            with self.subTest(case=case["name"]):
                # exercise get/set with repeated values
                for i, val in enumerate(case["data"]):
                    key = f"{self.test_key}_{i}"
                    self.cache_manager.set(key, val)
                    self.assertEqual(self.cache_manager.get(key), val)


class CacheManager:
    def __init__(self, cache):
        self.cache = cache

    def set(self, key, value):
        self.cache[key] = value

    def get(self, key):
        return self.cache.get(key)

    def exists(self, key):
        return key in self.cache

    def clear(self):
        self.cache.clear()
