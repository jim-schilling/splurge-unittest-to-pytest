import logging
import os
import re
import tempfile
import warnings
from typing import Any, Dict, List, Optional
from unittest.mock import Mock, patch

import pytest


class Calculator:
    def add(self, a: float, b: float) -> float:
        return a + b

    def divide(self, a: float, b: float) -> float:
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b

    def get_none(self) -> None:
        return None


class TestCalculatorComplete:
    @pytest.fixture(scope="class", autouse=True)
    def setup_class(cls):
        cls.class_level_resource = "shared_resource"
        print(f"setUpClass: Created {cls.class_level_resource}")
        yield
        print(f"tearDownClass: Cleaning up {cls.class_level_resource}")
        cls.class_level_resource = None

    @pytest.fixture(autouse=True)
    def setup_method(self):
        self.calculator = Calculator()
        self.test_data: Dict[str, Any] = {
            "numbers": [1, 2, 3],
            "string": "hello",
            "bool": True,
            "none_value": None,
        }
        self.temp_file = tempfile.NamedTemporaryFile(delete=False)
        self.temp_file.write(b"test content")
        self.temp_file.close()
        yield
        if os.path.exists(self.temp_file.name):
            os.unlink(self.temp_file.name)

    class_level_resource: Optional[str] = None

    def test_equality_assertions(self) -> None:
        assert self.calculator.add(2, 3) == 5
        assert self.calculator.add(2, 3) != 6
        assert self.test_data["bool"] is True
        assert self.test_data["string"] is not self.test_data["numbers"]
        assert self.calculator.get_none() is None
        assert self.calculator is not None

    def test_boolean_assertions(self) -> None:
        assert self.test_data["bool"]
        assert not not self.test_data["bool"]

    def test_type_assertions(self) -> None:
        assert isinstance(self.calculator, Calculator)
        assert not isinstance(self.test_data["string"], int)
        assert isinstance(self.test_data["numbers"], (list, tuple))

    def test_container_assertions(self) -> None:
        assert 2 in self.test_data["numbers"]
        assert 5 not in self.test_data["numbers"]
        assert "ell" in self.test_data["string"]
        assert "string" in self.test_data
        assert sorted([1, 2, 3]) == sorted([3, 1, 2])

    def test_sequence_assertions(self) -> None:
        test_list = [1, 2, 3, 4, 5]
        assert test_list == [1, 2, 3, 4, 5]
        assert self.test_data["numbers"] == [1, 2, 3]
        test_tuple = (1, 2, 3)
        assert test_tuple == (1, 2, 3)

    def test_set_assertions(self) -> None:
        set1 = {1, 2, 3}
        set2 = {1, 2, 3}
        set3 = {4, 5, 6}
        assert set1 == set2

    def test_dict_assertions(self) -> None:
        dict1 = {"a": 1, "b": 2}
        dict2 = {"a": 1, "b": 2}
        assert dict1 == dict2

    def test_string_assertions(self) -> None:
        test_string = "Hello World"
        multiline1 = "line1\nline2\nline3"
        multiline2 = "line1\nline2\nline3"
        assert multiline1 == multiline2
        assert re.search(r"Hello.*World", test_string)
        assert not re.search(r"\d+", test_string)

    def test_numeric_assertions(self) -> None:
        assert round(self.calculator.divide(1, 3) - 0.333333, 5) == 0
        assert round(self.calculator.divide(1, 3) - 0.5, 1) != 0
        assert 5 > 3
        assert 5 >= 5
        assert 3 < 5
        assert 5 <= 5

    def test_exception_assertions(self) -> None:
        with pytest.raises(ValueError):
            self.calculator.divide(10, 0)

        with pytest.raises(ValueError) as context:
            self.calculator.divide(10, 0)
        assert str(context.value) == "Cannot divide by zero"

        with pytest.raises(ValueError):
            self.calculator.divide(10, 0)

    def test_warning_assertions(self) -> None:
        def warn_function() -> None:
            warnings.warn("This is a test warning", UserWarning)

        with pytest.warns(UserWarning):
            warn_function()

        with pytest.warns(UserWarning, match=r"test warning"):
            warn_function()

    def test_log_assertions(self, caplog) -> None:
        logger = logging.getLogger("test_logger")
        with caplog.at_level("INFO"):
            logger.info("Test log message")
            logger.error("Test error message")

        assert len(caplog.messages) == 2
        assert "Test log message" in caplog.messages[0]

    def test_mock_assertions(self) -> None:
        mock_obj = Mock()
        mock_obj.method("arg1", "arg2")
        mock_obj.method.assert_called_with("arg1", "arg2")
        mock_obj.method.assert_called_once_with("arg1", "arg2")

    def test_file_operations(self) -> None:
        assert os.path.exists(self.temp_file.name)

        with open(self.temp_file.name, "rb") as f:
            content = f.read()

        assert content == b"test content"


