---
description: testing standards
alwaysApply: false
---
- Validate behavior of public APIs only.
- Prefer validation using actual data, interfaces, and objects
- Prefer use of mocks, where appropriate.
- Avoid dynamic patching.
- Unit test must target 85% code coverage for all public interfaces and methods.
- Combination of unit tests and integration tests must target 95% code coverage for all public interfaces and methods.
- Prefer tests that are independent, repeatable, and deterministic.
- Prefer shared helpers for common logic.
- Avoid validation of implementation details and private APIs.
- Prefer validation of patterns of text, and avoid exact matching of content and formatting.
- Prefer pytest; pytest-xdist may be used optionally for parallel runs (e.g., -n auto) when wanted.
- Prefer pytest-cov for code coverage with parameters --cov=your_package --cov-report=term-missing.
- Run pytest with code coverage when asked by user, otherwise skip.
- Prefer pytest-mock for mocking, where appropriate.
- Place unit tests in tests/unit/ and integration tests in tests/integration/, e2e tests in tests/e2e/, and performance tests in tests/performance/.
- Place test data in tests/data.
- For Python, prefer pure pytest function style tests.
- For Python, prefer use of tmp_path and tmp_path_factory fixtures for temporary files and directories.
- Name test methods as test_[condition]_[expectedResult].
- Each test method should ideally test a single condition and expected result.
- Use fixtures for common setup and teardown logic.
- Use parameterized tests for testing multiple input scenarios.
- Use assertions to validate expected outcomes.
- Prefer tests/unit/* to run to completion within 60 seconds.
- Prefer tests/integration/* to run to completion within 45 seconds.
- Prefer tests/e2e/* to run to run to completion within 45 seconds.
- Prefer tests/performance/* to run to completion within 45 seconds.
- Prefer entire test suite to run to completion within 120 seconds.